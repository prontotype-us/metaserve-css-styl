// Generated by CoffeeScript 1.10.0
(function() {
  var Compiler, StylCompiler, de_res, fs, rework_calc, rework_color, rework_colors, rework_function, rework_hex, rework_import, rework_inherit, rework_random_hex, rework_shade, rework_variant, styl,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  fs = require('fs');

  styl = require('styl');

  rework_calc = require('rework-calc');

  rework_color = require('rework-color-function');

  rework_colors = require('rework-plugin-colors');

  rework_inherit = require('rework-inherit');

  rework_variant = require('rework-variant');

  rework_hex = require('rework-hex');

  rework_random_hex = require('rework-random-hex');

  rework_function = require('rework-plugin-function');

  rework_shade = require('rework-shade');

  rework_import = require('rework-import');

  Compiler = require('metaserve/lib/compiler');

  de_res = function(n) {
    return Math.floor(n / 1000) * 1000;
  };

  StylCompiler = (function(superClass) {
    extend(StylCompiler, superClass);

    function StylCompiler() {
      return StylCompiler.__super__.constructor.apply(this, arguments);
    }

    StylCompiler.prototype.default_options = {
      import_dir: './static/css',
      ext: 'sass',
      vars: {}
    };

    StylCompiler.prototype.compile = function(sass_filename, cb) {
      var compiled, functions, options, pre_transformer, source, transformer, variant;
      options = this.options;
      variant = rework_variant(options.vars);
      pre_transformer = function(sass_src) {
        return styl(sass_src, {
          whitespace: true
        }).use(rework_import({
          path: options.import_dir,
          transform: pre_transformer
        })).toString();
      };
      functions = {
        mex: function() {
          return "#ffaa00";
        },
        black: function() {
          return "#000000";
        },
        slice: function(s, n) {
          return s.slice(n);
        }
      };
      transformer = function(sass_src) {
        return styl(pre_transformer(sass_src)).use(rework_inherit()).use(rework_random_hex).use(variant).use(rework_calc).use(rework_colors()).use(rework_color).use(rework_hex).use(rework_function(functions)).toString();
      };
      source = fs.readFileSync(sass_filename).toString();
      compiled = transformer(source);
      return cb(null, {
        content_type: 'text/css',
        source: source,
        compiled: compiled
      });
    };

    return StylCompiler;

  })(Compiler);

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    return new StylCompiler(options);
  };

}).call(this);
