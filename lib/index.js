// Generated by CoffeeScript 1.8.0
(function() {
  var Compiler, StylCompiler, de_res, fs, rework_color, rework_colors, rework_import, rework_shade, rework_variant, styl,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  styl = require('styl');

  rework_color = require('rework-color-function');

  rework_colors = require('rework-plugin-colors');

  rework_variant = require('rework-variant');

  rework_shade = require('rework-shade');

  rework_import = require('rework-import');

  Compiler = require('metaserve/lib/compiler');

  de_res = function(n) {
    return Math.floor(n / 1000) * 1000;
  };

  StylCompiler = (function(_super) {
    __extends(StylCompiler, _super);

    function StylCompiler() {
      return StylCompiler.__super__.constructor.apply(this, arguments);
    }

    StylCompiler.prototype.default_options = {
      import_dir: './static/css',
      ext: 'sass',
      vars: {}
    };

    StylCompiler.prototype.compile = function(sass_filename) {
      var options;
      options = this.options;
      return function(req, res, next) {
        var compiled, pre_transformer, sass_src, transformer, variant;
        variant = rework_variant(options.vars);
        pre_transformer = function(sass_src) {
          return styl(sass_src, {
            whitespace: true
          }).use(rework_import({
            path: options.import_dir,
            transform: pre_transformer
          })).toString();
        };
        transformer = function(sass_src) {
          return styl(pre_transformer(sass_src)).use(variant).use(rework_colors()).use(rework_color).toString();
        };
        sass_src = fs.readFileSync(sass_filename).toString();
        compiled = transformer(sass_src);
        res.setHeader('Content-Type', 'text/css');
        return res.end(compiled);
      };
    };

    return StylCompiler;

  })(Compiler);

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    return new StylCompiler(options);
  };

}).call(this);
